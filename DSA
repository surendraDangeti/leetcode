1) Array Flattening and Transformation
A)
let data = [1,[[5],9,12],9,]
let tempData = data.toString()
console.log(tempData.split(',').map((item)=> Number(item)))

Recursive Solution

function flattenArray(arr, result = []) {
    for (let i = 0; i < arr.length; i++) {
        if (Array.isArray(arr[i])) {
            flattenArray(arr[i], result); // recursive call
        } else {
            result.push(arr[i]);
        }
    }
    return result;
}

let data = [1, [[5], 9, 12], 9];
console.log(flattenArray(data)); // [1, 5, 9, 12, 9]






2) find the longest consecutive sequence starting from 1. For the given array
let k = [3, 200, 2, 50, 1, 8, 6, 4];
let j = [];
let set = new Set(k);

for (let i = 1; ; i++) {
    if (set.has(i)) {
        j.push(i);
    } else {
        break;
    }
}

console.log(j[j.length - 1]);



3) findMedianSortedArrays 
var findMedianSortedArrays = function(nums1, nums2) {
    let result = [...nums1 ,...nums2]
    result.sort((a, b) => a - b)

    let isOdd = Math.floor(result.length % 2)
    if (!isOdd) {
        let lefCenter = result.length / 2 - 1
        let RightCenter = lefCenter + 1
        return ((result[lefCenter] + result[RightCenter]) / 2)
    } else {
        return (result[Math.floor(result.length / 2)])
    }
}




4)createCounter
var createCounter = function(n){
    return function(){
        return n++
    }
}

const create = createCounter(6)
console.log(create())
console.log(create())
console.log(create())




5)function isPalindrome(str) {
let left = 0;
let right = str.length-1

while(left < right ){
    if(str[left] !== str[right]){
        return false;
    }
    left++
    right--
}
return true;
}
console.log(isPalindrome("madam")); 
console.log(isPalindrome("mom")); 
console.log(isPalindrome("value")); 




6)Longest Palindromic Substring
function isPalindrome(s, left, right) {
    while (left < right) {
        if (s[left] !== s[right]) {
            return false;
        }
        left++;
        right--;
    }
    return true;
}

var findMaxSubString = function(s) {
    let start = 0;
    let maxIndex = 0;

    for (let i = 0; i < s.length; i++) {
        for (let j = i; j < s.length; j++) {
            if (isPalindrome(s, i, j)) {
                let currentIndex = j - i + 1;
                if (currentIndex > maxIndex) {
                    maxIndex = currentIndex;
                    start = i;
                }
            }
        }
    }

    let k = 0;
    let result = "";
    while (k < maxIndex) {
        result += s[start + k];
        k++;
    }

    console.log("Longest Palindromic Substring:", result);
    return result;
}

findMaxSubString('cbbd'); 










